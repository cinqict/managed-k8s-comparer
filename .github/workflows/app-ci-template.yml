name: 'Build and Deploy Dummy App'
on:
  workflow_call:
jobs:
  check-secret:
    runs-on: ubuntu-latest
    outputs:
      key-defined: ${{ steps.key-defined.outputs.defined }}
    steps:
        - id: key-defined
          env:
              USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
              TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          if: "${{ env.USERNAME != '' && env.TOKEN != '' }}"
          run: echo "::set-output name=defined::true"
  app_ci:
    needs: check-secret
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        if: needs.check-secret.outputs.key-defined == 'true'
        uses: docker/setup-buildx-action@v3
      - name: Log in to DockerHub
        if: needs.check-secret.outputs.key-defined == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Dummy App Image
        if: needs.check-secret.outputs.key-defined == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./dummy-app
          file: ./dummy-app/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/dummy-app:latest
      - name: Download kubeconfig artifact
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: .
      - name: Download DB credentials
        uses: actions/download-artifact@v4
        with:
          name: pgsql-credentials
          path: .
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: Create pgsql-credentials Secret
        run: |
          kubectl --kubeconfig=kubeconfig.yaml delete secret pgsql-credentials || true
          kubectl --kubeconfig=kubeconfig.yaml create secret generic pgsql-credentials \
            --from-file=host=pgsql_host.txt \
            --from-file=port=pgsql_port.txt \
            --from-file=user=pgsql_username.txt \
            --from-file=password=pgsql_password.txt \
            --from-file=dbname=pgsql_dbname.txt
      - name: Set image source in k8s-deployment.yaml
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            sed -i 's|{{DOCKERHUB_USER}}/dummy-app:latest|${{ secrets.DOCKERHUB_USERNAME }}/dummy-app:latest|' ./dummy-app/k8s-deployment.yaml
          else
            sed -i 's|{{DOCKERHUB_USER}}/dummy-app:latest|nsavenije/dummy-app:latest|' ./dummy-app/k8s-deployment.yaml
          fi
      - name: Verify image replacement in k8s-deployment.yaml
        run: grep 'image:' ./dummy-app/k8s-deployment.yaml
      - name: Deploy Dummy App via ArgoCD
        run: |
          kubectl --kubeconfig=kubeconfig.yaml -n argocd delete application dummy-app --ignore-not-found
          sleep 5
          kubectl --kubeconfig=kubeconfig.yaml apply -f ./dummy-app/argocd-app.yaml
      - name: Restart Dummy App Deployment
        run: |
          sleep 10
          kubectl --kubeconfig=kubeconfig.yaml -n default rollout restart deployment dummy-app

      - name: Download benchmark results artifact
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results-infra
          path: .
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Record external_ip start time
        run: python monitoring/record_external_ip_start.py
      - name: Upload updated benchmark results artifact
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-ip-1
          path: results.json

      - name: Deploy Pod AutoScaler
        run: |
          kubectl --kubeconfig=kubeconfig.yaml apply -f ./dummy-app/pod-autoscaler.yaml

