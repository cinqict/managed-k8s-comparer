# This workflow deploys landing zone resources using Terraform
name: 'Terraform Landing Zone'

on:
  workflow_call:
    inputs:
      csp:
        required: false
        type: string
        default: 'ovh'

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_VAR_ovh_endpoint: ${{ inputs.csp == 'ovh' && vars.OVH_ENDPOINT || '' }}
      TF_VAR_ovh_application_key: ${{ inputs.csp == 'ovh' && secrets.OVH_APPLICATION_KEY || '' }}
      TF_VAR_ovh_application_secret: ${{ inputs.csp == 'ovh' && secrets.OVH_APPLICATION_SECRET || '' }}
      TF_VAR_ovh_consumer_key: ${{ inputs.csp == 'ovh' && secrets.OVH_CONSUMER_KEY || '' }}
      TF_VAR_ovh_project_id: ${{ inputs.csp == 'ovh' && secrets.OVH_PROJECT_ID || '' }}
      TF_VAR_resource_group_name: ${{ vars.RESOURCE_GROUP_NAME }}
      ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZ_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.AZ_TENANT_ID }}
      TF_VAR_hcloud_token: ${{ inputs.csp == 'hetzner' && secrets.HETZNER_API_TOKEN || ''}}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Run Pre-Apply script
        run: |
          PRE_APPLY_SCRIPT="terraform/${{ inputs.csp }}/scripts/pre_apply.py"
          if [ -f "$PRE_APPLY_SCRIPT" ]; then
            echo "Running pre-apply script for ${{ inputs.csp }}..."
            chmod +x "$PRE_APPLY_SCRIPT"
            "$PRE_APPLY_SCRIPT"
          else
            echo "No pre-apply steps required for ${{ inputs.csp }}."
          fi

      - name: Terraform Init
        run: |
          terraform -chdir=terraform/${{ inputs.csp }} init --reconfigure \
            -backend-config="resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ inputs.csp }}tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Plan
        run: terraform -chdir=terraform/${{ inputs.csp }} plan -out=tfplan

      - name: Download benchmark results artifact
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results-stub
          path: .

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Terraform Apply
        run: |
          start=$(date +%s)
          terraform -chdir=terraform/${{ inputs.csp }} apply -auto-approve tfplan
          end=$(date +%s)
          duration=$((end - start))
          echo $start > apply_start.txt
          echo $end > apply_end.txt
          echo $duration > apply_duration.txt

      - name: Record Terraform apply end time and duration
        run: python monitoring/record_apply.py

      - name: Upload updated benchmark results artifact
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-infra
          path: results.json

      - name: Run Post-Apply script
        env: 
          HCLOUD_TOKEN: ${{ secrets.HETZNER_API_TOKEN }}
          OVH_ENDPOINT: ${{ vars.OVH_ENDPOINT }}
          OVH_APPLICATION_KEY: ${{ secrets.OVH_APPLICATION_KEY }}
          OVH_APPLICATION_SECRET: ${{ secrets.OVH_APPLICATION_SECRET }}
          OVH_CONSUMER_KEY: ${{ secrets.OVH_CONSUMER_KEY }}
          OVH_PROJECT_ID: ${{ secrets.OVH_PROJECT_ID }}
        run: |
          POST_APPLY_SCRIPT="terraform/${{ inputs.csp }}/scripts/post_apply.py"
          if [ -f "$POST_APPLY_SCRIPT" ]; then
            echo "Running post-apply script for ${{ inputs.csp }}..."
            chmod +x "$POST_APPLY_SCRIPT"
            python "$POST_APPLY_SCRIPT"
          else
            echo "No post-apply steps required for ${{ inputs.csp }}."
          fi

      - name: Export kubeconfig
        if: ${{ inputs.csp != 'hetzner' }}
        run: terraform -chdir=terraform/${{ inputs.csp }} output -raw kubeconfig > kubeconfig.yaml

      - name: Upload kubeconfig as artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: kubeconfig.yaml

      # OVH-specific steps
      - name: Install OVH Python SDK
        if: ${{ inputs.csp == 'ovh' }}
        run: pip install ovh

      - name: Export OVH admin DB credentials to files
        if: ${{ inputs.csp == 'ovh' }}
        run: |
          export PGSQL_SERVICE_NAME=$(terraform -chdir=terraform/${{ inputs.csp }} output -raw pgsql_cluster_id)
          python terraform/ovh/scripts/retrieve_pg_admin_credentials.py
        env:
          OVH_ENDPOINT: ${{ vars.OVH_ENDPOINT }}
          OVH_APPLICATION_KEY: ${{ secrets.OVH_APPLICATION_KEY }}
          OVH_APPLICATION_SECRET: ${{ secrets.OVH_APPLICATION_SECRET }}
          OVH_CONSUMER_KEY: ${{ secrets.OVH_CONSUMER_KEY }}
          OVH_PROJECT_ID: ${{ secrets.OVH_PROJECT_ID }}

      - name: Export OVH DB credentials to files
        if: ${{ inputs.csp == 'ovh' }}
        run: |
          terraform -chdir=terraform/${{ inputs.csp }} output -raw pgsql_host > pgsql_host.txt
          terraform -chdir=terraform/${{ inputs.csp }} output -raw pgsql_port > pgsql_port.txt
          terraform -chdir=terraform/${{ inputs.csp }} output -raw pgsql_dbname > pgsql_dbname.txt


      - name: Export DB credentials to files
        if: ${{ inputs.csp == 'azure'}}
        run: |
          terraform -chdir=terraform/${{ inputs.csp }} output -raw pgsql_host > pgsql_host.txt
          terraform -chdir=terraform/${{ inputs.csp }} output -raw pgsql_port > pgsql_port.txt
          terraform -chdir=terraform/${{ inputs.csp }} output -raw pgsql_dbname > pgsql_dbname.txt
          terraform -chdir=terraform/${{ inputs.csp }} output -raw pgsql_username > pgsql_username.txt
          terraform -chdir=terraform/${{ inputs.csp }} output -raw pgsql_password > pgsql_password.txt

      - name: Upload DB credentials as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pgsql-credentials
          path: |
            pgsql_host.txt
            pgsql_port.txt
            pgsql_username.txt
            pgsql_password.txt
            pgsql_dbname.txt