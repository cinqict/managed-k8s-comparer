# This workflow destroys landing zone resources using Terraform for OVH or Azure
name: 'Terraform Destroy'

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      target:
        description: 'Which environment to destroy?'
        required: true
        type: choice
        options:
          - ovh
          - stackit
          - azure
          - hetzner

jobs:
  sign-of-life:
    runs-on: ubuntu-latest
    steps:
      - name: Sign of life
        run: |
          TARGET="${{ github.event.inputs.target }}"
          ALT_TARGET="${{ inputs.target }}"
          if [ -n "$ALT_TARGET" ] && [ ${#ALT_TARGET} -ge ${#TARGET} ]; then
            FINAL_TARGET="$ALT_TARGET"
          else
            FINAL_TARGET="$TARGET"
          fi
          echo "Starting Terraform destroy for $FINAL_TARGET"
  destroy-ovh:
    if: ${{ (github.event.inputs.target == 'ovh') || (inputs.target == 'ovh') }}
    runs-on: ubuntu-latest
    env:
      TF_VAR_ovh_endpoint: ${{ vars.OVH_ENDPOINT }}
      TF_VAR_ovh_application_key: ${{ secrets.OVH_APPLICATION_KEY }}
      TF_VAR_ovh_application_secret: ${{ secrets.OVH_APPLICATION_SECRET }}
      TF_VAR_ovh_consumer_key: ${{ secrets.OVH_CONSUMER_KEY }}
      TF_VAR_ovh_project_id: ${{ secrets.OVH_PROJECT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZ_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.AZ_TENANT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: |
          terraform -chdir=terraform/ovh init --reconfigure \
            -backend-config="resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=ovhtfstate" \
            -backend-config="key=terraform.tfstate"

      - name: First Terraform Destroy (ignore errors)
        run: |
          terraform -chdir=terraform/ovh destroy -auto-approve || true

      - name: Wait before retrying destroy
        run: sleep 20

      - name: Final Terraform Destroy
        run: terraform -chdir=terraform/ovh destroy -auto-approve

  destroy-azure:
    if: ${{ (github.event.inputs.target == 'azure') || (inputs.target == 'azure') }}
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZ_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.AZ_TENANT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: |
          terraform -chdir=terraform/azure init --reconfigure \
            -backend-config="resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=azuretfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Destroy
        run: terraform -chdir=terraform/azure destroy -auto-approve

  destroy-hetzner:
    if: ${{ (github.event.inputs.target == 'hetzner') || (inputs.target == 'hetzner') }}
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZ_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.AZ_TENANT_ID }}
      TF_VAR_hcloud_token: ${{ secrets.HETZNER_API_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Delete all Hetzner resources via script
        env:
          HCLOUD_TOKEN: ${{ secrets.HETZNER_API_TOKEN }}
          PYTHONUNBUFFERED: 1
        run: |
          python3 -m pip install requests
          python3 scripts/hetzner/destroy.py

      - name: Generate dummy SSH keys (Hetzner destroy)
        run: |
          ssh-keygen -t ed25519 -f terraform/hetzner/master_key -N ""
          ssh-keygen -t ed25519 -f terraform/hetzner/worker_key -N ""

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: |
          terraform -chdir=terraform/hetzner init --reconfigure \
            -backend-config="resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=hetznertfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Destroy
        run: terraform -chdir=terraform/hetzner destroy -auto-approve

  destroy-stackit:
    if: ${{ (github.event.inputs.target == 'stackit') || (inputs.target == 'stackit') }}
    runs-on: ubuntu-latest
    env:
      TF_VAR_stackit_project_id: ${{ secrets.STACKIT_PROJECT_ID }}
      TF_VAR_stackit_service_account_key: ${{ secrets.STACKIT_SERVICE_ACCOUNT_KEY }}
      ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZ_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.AZ_TENANT_ID }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3    
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: |  
          terraform -chdir=terraform/stackit init --reconfigure \
            -backend-config="resource_group_name=${{ vars.RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=stackittfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Destroy
        run: terraform -chdir=terraform/stackit destroy -auto-approve