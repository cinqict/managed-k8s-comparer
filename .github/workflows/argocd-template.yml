# This workflow deploys OVH landing zone resources using Terraform
name: 'Install and setup ArgoCD '

on:
  workflow_call:
  workflow_dispatch:

jobs:
  argocd:
    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download kubeconfig artifact
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: .

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Wait for Kubernetes API
        run: |
          for i in {1..30}; do
            kubectl --kubeconfig=kubeconfig.yaml get nodes && exit 0 || sleep 20
          done
          echo "Cluster did not become ready in time." && exit 1

      - name: Install ArgoCD
        run: |
          kubectl --kubeconfig=kubeconfig.yaml create namespace argocd || true
          kubectl --kubeconfig=kubeconfig.yaml apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl --kubeconfig=kubeconfig.yaml -n argocd rollout status deployment/argocd-server --timeout=300s

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Port-forward ArgoCD API server
        run: |
          kubectl --kubeconfig=kubeconfig.yaml -n argocd port-forward svc/argocd-server 8080:443 &
          echo $! > portforward.pid
          sleep 10

      - name: Login to ArgoCD
        run: |
          argocd login localhost:8080 --username admin --password $(kubectl --kubeconfig=kubeconfig.yaml -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) --insecure
          
      - name: Register GitHub repo with ArgoCD
        run: |
          argocd repo list | grep "https://github.com/${{ github.repository }}" || \
          argocd repo add https://github.com/${{ github.repository }} \
            --username ${{ github.actor }} \
            --password ${{ secrets.PAT_GITHUB }} \
            --insecure

      - name: Cleanup port-forward
        if: always()
        run: |
          if [ -f portforward.pid ]; then
            kill $(cat portforward.pid) || true
            rm portforward.pid
          fi